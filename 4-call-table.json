[
    {
        "id": "6ae37af9c8689bca",
        "type": "tab",
        "label": "Recorders & Calls",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ee187ca1e7c77fa",
        "type": "group",
        "z": "6ae37af9c8689bca",
        "name": "Active Calls & Recorders",
        "style": {
            "label": true
        },
        "nodes": [
            "e077a1fd7774b673",
            "458e044b84a0bf61",
            "816f2b8081383fd3",
            "e58ad2d8d0ee1dc5",
            "97439d0fdd5a63d4",
            "3201b07f5d35d45a",
            "81efc56a59696d52",
            "6a1a1a843081a284",
            "f7e487d148bf483e",
            "652bfa7b3aee55d4",
            "0e652cf69b2587cc"
        ],
        "x": 34,
        "y": 19,
        "w": 612,
        "h": 322
    },
    {
        "id": "e077a1fd7774b673",
        "type": "function",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Calls",
        "func": "var dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nconst sortmsg = {\n       payload: {\n              command: \"setSort\",\n              arguments: [[{ column: \"call_num\", dir: \"asc\" }]],\n              returnPromise: false\n       }\n};\n\nfunction boldIfTrue(text, compare) {\n       if (text == compare) {\n              return \"<span style='font-weight:bold; background-color:#cc0000;'>\" + text + \"</span>\";\n       };\n       return text;\n}\n\nvar callData = flow.get(\"callData\", \"memoryOnly\");\nif (callData === undefined) {\n       callData = {};\n       flow.set(\"callData\", callData, \"memoryOnly\");\n}\n\n// update calls using call_num as a unique ID\nif (msg.payload.type == \"calls_active\") {\n       for (var i = 0; i < msg.payload.calls.length; i++) {\n              var cnum = msg.payload.calls[i].call_num;\n              callData[cnum] = msg.payload.calls[i];\n              callData[cnum].freq = (msg.payload.calls[i].freq / 1000000).toFixed(6);\n              callData[cnum].update_time = Math.round(+new Date() / 1000);\n\n              // preserve only the newest encypted call on the same TG\n              if (callData[cnum].call_state_type == \"MONITORING\") {\n                     for (let i in callData) {\n                            if (callData[i].talkgroup == callData[cnum].talkgroup) {\n                                   if (i > cnum) {\n                                          callData[cnum].update_time = 0;\n                                   }\n                            }\n                     }\n              }\n       }\n} else if (msg.payload.type == \"call_start\") {\n       var cnum = msg.payload.call.call_num;\n       callData[cnum] = msg.payload.call;\n       callData[cnum].freq = (msg.payload.call.freq / 1000000).toFixed(6);\n       callData[cnum].update_time = Math.round(+new Date() / 1000);\n\n       // preserve only the newest encypted call on the same TG\n       if (callData[cnum].call_state_type == \"MONITORING\") {\n              for (let i in callData) {\n                     if (callData[i].talkgroup == callData[cnum].talkgroup) {\n                            if (i > cnum) {\n                                   callData[cnum].update_time = 0;\n                            }\n                     }\n              }\n       }\n\n} else if (msg.payload.type == \"call_end\") {\n       var cnum = msg.payload.call.call_num;\n       callData[cnum].call_state_type = \"COMPLETED\";\n       callData[cnum].rec_state_type = \"STOPPED\";\n       callData[cnum].mon_state_type = \"UNSPEC\";\n       callData[cnum].length = msg.payload.call.length;\n       callData[cnum].stop_time = msg.payload.call.stop_time;\n}\n\n// Prune calls 30 seconds after last update\nvar pruneTime = Math.round(+new Date() / 1000);\nvar num_calls = 0;\nfor (let i in callData) {\n       callData[i].call_state_type = boldIfTrue(callData[i].call_state_type, \"RECORDING\")\n       callData[i].encrypted = boldIfTrue(callData[i].encrypted, \"true\")\n\n       if (callData[i].call_state_type == \"COMPLETED\") {\n              callData[i].rec_num = \"\";\n              callData[i].src_num = \"\";\n       }\n\n       if (callData[i].update_time < pruneTime - 15) {\n              delete callData[i];\n       }\n\n       num_calls++;\n}\n\nnode.status({ fill: \"red\", shape: dots, text: msg.payload.type + \" \" + num_calls });\n\nmsg.payload = Object.values(callData);\nflow.set(\"callData\", callData, \"memoryOnly\");\n\nreturn ([[msg, sortmsg]]);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "458e044b84a0bf61"
            ]
        ]
    },
    {
        "id": "458e044b84a0bf61",
        "type": "ui_table",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "group": "fa2b9cb252fcf55f",
        "name": "Calls",
        "order": 2,
        "width": 24,
        "height": 7,
        "columns": [
            {
                "field": "call_num",
                "title": "Call",
                "width": "75",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "sys_name",
                "title": "System",
                "width": "75",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_num",
                "title": "R",
                "width": "50",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "src_num",
                "title": "S",
                "width": "50",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "freq",
                "title": "Freq",
                "width": "100",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup",
                "title": "TG",
                "width": "75",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "talkgroup_alpha_tag",
                "title": "TG Tag",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "unit",
                "title": "Source",
                "width": "100",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "encrypted",
                "title": "Encrypt",
                "width": "100",
                "align": "center",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "phase2",
                "title": "P2",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "analog",
                "title": "Analog",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "call_state_type",
                "title": "CallState",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_state_type",
                "title": "RecS",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "mon_state_type",
                "title": "Mon",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "elapsed",
                "title": "Elap",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "length",
                "title": "len",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 570,
        "y": 220,
        "wires": []
    },
    {
        "id": "816f2b8081383fd3",
        "type": "mqtt in",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Recorder (update)",
        "topic": "server/status/recorder",
        "qos": "0",
        "datatype": "json",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "97439d0fdd5a63d4"
            ]
        ]
    },
    {
        "id": "e58ad2d8d0ee1dc5",
        "type": "mqtt in",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Recorders (all)",
        "topic": "server/status/recorders",
        "qos": "0",
        "datatype": "json",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 100,
        "wires": [
            [
                "97439d0fdd5a63d4"
            ]
        ]
    },
    {
        "id": "97439d0fdd5a63d4",
        "type": "function",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Recorders",
        "func": "var dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nfunction boldIfTrue(text, compare){\n    if (text == compare) {\n        return \"<span style='font-weight:bold; background-color:#cc0000;'>\"+text+\"</span>\";\n    };\n    return text;\n}\n\n\nconst sortmsg = {\n    payload: {\n        command: \"setSort\",\n        arguments: [[{ column: \"id\", dir: \"asc\" }]],\n        returnPromise: false\n    }\n};\n\nvar recData = flow.get(\"recData\", \"memoryOnly\");\nif (recData === undefined) {\n    recData = {};\n    flow.set(\"recData\", recData, \"memoryOnly\");\n}\n\nif (msg.payload.type == \"recorders\") {\n    for (var i = 0; i < msg.payload.recorders.length; i++) {\n        var id = msg.payload.recorders[i].id\n        recData[id] = msg.payload.recorders[i]\n        recData[id].freq = (recData[id].freq / 1000000).toFixed(6)\n    }\n\n//<span style='backgroundcolor:#3FB449; font-weight:bold;'>asdasas</span>..\n\n} else if (msg.payload.type == \"recorder\") {\n    if (recData.len > 0) {\n        var id = msg.payload.recorder.id\n        recData[id] = msg.payload.recorder\n        recData[id].freq = (recData[id].freq / 1000000).toFixed(6)\n    }\n}\n\nfor (let i in recData) {\n    recData[i].squelched = boldIfTrue(recData[i].squelched, \"false\")\n    recData[i].rec_state_type = boldIfTrue(recData[i].rec_state_type, \"RECORDING\")\n    if (recData[i].rec_state_type == \"AVAILABLE\") {\n        recData[i].freq = \"\";\n    }\n}\n\nvar newmsg = { payload: Object.values(recData) };\nnode.send([[newmsg]]) //, sortmsg]]);\nnode.status({ fill: \"red\", shape: dots, text: msg.payload.type + \" \" + newmsg.payload.length });\nflow.set(\"recData\", recData, \"memoryOnly\");\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "3201b07f5d35d45a"
            ]
        ]
    },
    {
        "id": "3201b07f5d35d45a",
        "type": "ui_table",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "group": "fa2b9cb252fcf55f",
        "name": "Recorders",
        "order": 1,
        "width": 24,
        "height": 11,
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "Type",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "src_num",
                "title": "Source",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_num",
                "title": "Recorder",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "freq",
                "title": "Freq",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "Count",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration",
                "title": "Duration",
                "width": "",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rec_state_type",
                "title": "RecState",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "squelched",
                "title": "Squelched",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "81efc56a59696d52",
        "type": "mqtt in",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Call (start)",
        "topic": "server/status/call_start",
        "qos": "0",
        "datatype": "json",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "e077a1fd7774b673"
            ]
        ]
    },
    {
        "id": "6a1a1a843081a284",
        "type": "mqtt in",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Call (end)",
        "topic": "server/status/call_end",
        "qos": "0",
        "datatype": "json",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "e077a1fd7774b673"
            ]
        ]
    },
    {
        "id": "f7e487d148bf483e",
        "type": "ui_ui_control",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Refresh",
        "events": "all",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "e077a1fd7774b673",
                "97439d0fdd5a63d4"
            ]
        ]
    },
    {
        "id": "0e652cf69b2587cc",
        "type": "mqtt in",
        "z": "6ae37af9c8689bca",
        "g": "3ee187ca1e7c77fa",
        "name": "Calls (active)",
        "topic": "server/status/calls_active",
        "qos": "0",
        "datatype": "json",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": "0",
        "inputs": 0,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "e077a1fd7774b673"
            ]
        ]
    },
    {
        "id": "652bfa7b3aee55d4",
        "type": "link in",
        "z": "6ae37af9c8689bca",
        "d": true,
        "g": "3ee187ca1e7c77fa",
        "name": "Calls (active)",
        "links": [
            "f1da1fc229689158"
        ],
        "x": 130,
        "y": 300,
        "wires": [
            [
                "e077a1fd7774b673"
            ]
        ],
        "l": true
    },
    {
        "id": "fa2b9cb252fcf55f",
        "type": "ui_group",
        "name": "Calls",
        "tab": "f3d0b12158ef2f71",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "61de5090.0f5d9",
        "type": "mqtt-broker",
        "name": "Local MQTT Server",
        "broker": "192.168.1.20",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f3d0b12158ef2f71",
        "type": "ui_tab",
        "name": "Calls",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    }
]