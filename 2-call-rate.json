[
    {
        "id": "9e055a34fe489dca",
        "type": "tab",
        "label": "Call Rates",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "473a871ba87fbdfb",
        "type": "group",
        "z": "9e055a34fe489dca",
        "name": "MQTT In / Sort By System",
        "style": {
            "label": true,
            "fill": "#ffC000",
            "fill-opacity": "0.35",
            "color": "#000000"
        },
        "nodes": [
            "55bf4e98669a42c3",
            "9a74e64faff3ba70",
            "dc9fd2e4ff7ff2d7",
            "f1da1fc229689158",
            "0d7997594d8439a3",
            "85e06cd04d95e77b"
        ],
        "x": 34,
        "y": 19,
        "w": 612,
        "h": 142
    },
    {
        "id": "33daade83f7dfc86",
        "type": "group",
        "z": "9e055a34fe489dca",
        "name": "Charts",
        "style": {
            "label": true
        },
        "nodes": [
            "cb56707051a9cf85",
            "b40471e7163d4186",
            "dd8b3b996b62d762",
            "980e96e3c7d91bbb",
            "02873d08e3557ed1",
            "708242a7c469610c"
        ],
        "x": 34,
        "y": 179,
        "w": 612,
        "h": 169.5
    },
    {
        "id": "70f3387673fc2fec",
        "type": "group",
        "z": "9e055a34fe489dca",
        "name": "Min/Max/Avg",
        "style": {
            "label": true
        },
        "nodes": [
            "529cfce6d53a2c46",
            "7cf511fd541361e3",
            "6769e3c36a0bb664",
            "fc43ffab96b31188",
            "2df186c56c12735c",
            "021e07256c5f844b"
        ],
        "x": 34,
        "y": 359,
        "w": 612,
        "h": 162
    },
    {
        "id": "55bf4e98669a42c3",
        "type": "mqtt in",
        "z": "9e055a34fe489dca",
        "g": "473a871ba87fbdfb",
        "name": "Calls In",
        "topic": "server/status/calls_active",
        "qos": "0",
        "datatype": "json",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": "0",
        "inputs": 0,
        "x": 110,
        "y": 60,
        "wires": [
            [
                "f1da1fc229689158",
                "0d7997594d8439a3"
            ]
        ]
    },
    {
        "id": "9a74e64faff3ba70",
        "type": "link out",
        "z": "9e055a34fe489dca",
        "g": "473a871ba87fbdfb",
        "name": "Total Calls",
        "mode": "link",
        "links": [
            "3d60ee395ccb54ec",
            "fc43ffab96b31188"
        ],
        "x": 550,
        "y": 60,
        "wires": [],
        "inputLabels": [
            "All"
        ],
        "l": true
    },
    {
        "id": "dc9fd2e4ff7ff2d7",
        "type": "link out",
        "z": "9e055a34fe489dca",
        "g": "473a871ba87fbdfb",
        "name": "System Calls",
        "mode": "link",
        "links": [
            "980e96e3c7d91bbb"
        ],
        "x": 550,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "cb56707051a9cf85",
        "type": "ui_chart",
        "z": "9e055a34fe489dca",
        "g": "33daade83f7dfc86",
        "name": "Calls Per Minute",
        "group": "76f0c0df11c2ed51",
        "order": 7,
        "width": 9,
        "height": 8,
        "label": "Calls Per Minute",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 540,
        "y": 220,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "b40471e7163d4186",
        "type": "ui_chart",
        "z": "9e055a34fe489dca",
        "g": "33daade83f7dfc86",
        "name": "Calls Per Hour",
        "group": "76f0c0df11c2ed51",
        "order": 2,
        "width": 15,
        "height": 8,
        "label": "Calls Per Hour",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 540,
        "y": 260,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "dd8b3b996b62d762",
        "type": "ui_chart",
        "z": "9e055a34fe489dca",
        "g": "33daade83f7dfc86",
        "name": "Calls Per Day",
        "group": "76f0c0df11c2ed51",
        "order": 8,
        "width": 15,
        "height": 8,
        "label": "Calls Per Day",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "step",
        "nodata": "Calls",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 540,
        "y": 300,
        "wires": [
            []
        ],
        "inputLabels": [
            "Calls"
        ]
    },
    {
        "id": "980e96e3c7d91bbb",
        "type": "link in",
        "z": "9e055a34fe489dca",
        "g": "33daade83f7dfc86",
        "name": "Sys. Calls",
        "links": [
            "dc9fd2e4ff7ff2d7"
        ],
        "x": 120,
        "y": 220,
        "wires": [
            [
                "02873d08e3557ed1"
            ]
        ],
        "l": true
    },
    {
        "id": "f1da1fc229689158",
        "type": "link out",
        "z": "9e055a34fe489dca",
        "g": "473a871ba87fbdfb",
        "name": "Calls (active)",
        "mode": "link",
        "links": [
            "652bfa7b3aee55d4"
        ],
        "x": 310,
        "y": 60,
        "wires": [],
        "l": true
    },
    {
        "id": "02873d08e3557ed1",
        "type": "function",
        "z": "9e055a34fe489dca",
        "g": "33daade83f7dfc86",
        "name": "Max",
        "func": "function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\nvar data = context.get(\"data\", \"memoryOnly\");\nif (data === undefined) {\n    data = {};\n    context.set(\"data\", data, \"memoryOnly\");\n}\n\nvar next2sAvg = context.get(\"next2sAvg\", \"memoryOnly\");\nif (next2sAvg === undefined) {\n    next2sAvg = Number(msg.timestamp) + 2\n    context.set(\"next2sAvg\", next2sAvg, \"memoryOnly\");\n}\n\nvar next15sAvg = context.get(\"next15sAvg\", \"memoryOnly\");\nif (next15sAvg === undefined) {\n    next15sAvg = Number(msg.timestamp) + 15\n    context.set(\"next15sAvg\", next15sAvg, \"memoryOnly\");\n}\n\nvar next1mAvg = context.get(\"next1mAvg\", \"memoryOnly\");\nif (next1mAvg === undefined) {\n    next1mAvg = Number(msg.timestamp) + 300\n    context.set(\"next1mAvg\", next1mAvg, \"memoryOnly\");\n}\n\nvar dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nvar intervals = [\"2s\", \"15s\", \"1min\"];\n\n//if (msg.topic != \"sendit\") {\n    for (let period in intervals) {\n        var rate = intervals[period]\n\n        if (data[rate] === undefined) {\n            data[rate] = {};\n        }\n\n        var number = roundToTwo(msg.payload);\n\n        if (data[rate][msg.topic] === undefined) {\n            data[rate][msg.topic] = {\n                \"max\": number,\n            };\n        }\n\n        if (number > data[rate][msg.topic].max) { data[rate][msg.topic].max = number; }\n    }\n    node.status({ fill: \"green\", shape: dots, text: \"calculating...\" });\n//} else {\n\n    //var msg_out = [];\n\n    //for (let interval in intervals) {\n    //    var period = intervals[interval];\n        // if (msg.payload == period) {\n        //     for (let system in data[period]) {\n        //         var newmsg = {};\n        //         var index = \"max\";\n        //         newmsg.topic = system;\n        //         newmsg.target = period;\n        //         newmsg.payload = data[period][system][index];\n        //         node.send(newmsg);\n        //     }\n        //     node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n        //     data[period] = {};\n        //}\n    //}\n//}\n\nvar newmsg = {};\n\nif (msg.timestamp >= next2sAvg){\n    var period = \"2s\";\n    for (let system in data[period]) {\n        newmsg = {\n            topic: system,\n            target: period,\n            payload: data[period][system][\"max\"]\n        };\n        node.send(newmsg);\n    }\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n    data[period] = {};\n\n    next2sAvg = Number(msg.timestamp) + 2\n    context.set(\"next2sAvg\", next2sAvg, \"memoryOnly\");\n}\n\nif (msg.timestamp >= next15sAvg) {\n    var period = \"15s\";\n    for (let system in data[period]) {\n        newmsg = {\n            topic: system,\n            target: period,\n            payload: data[period][system][\"max\"]\n        };\n        node.send(newmsg);\n    }\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n    data[period] = {};\n\n    next15sAvg = Number(msg.timestamp) + 15\n    context.set(\"next15sAvg\", next15sAvg, \"memoryOnly\");\n}\n\nif (msg.timestamp >= next1mAvg) {\n    var period = \"1min\";\n    for (let system in data[period]) {\n        newmsg = {\n            topic: system,\n            target: period,\n            payload: data[period][system][\"max\"]\n        };\n        node.send(newmsg);\n    }\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + period });\n    data[period] = {};\n\n    next1mAvg = Number(msg.timestamp) + 60\n    context.set(\"next1mAvg\", next1mAvg, \"memoryOnly\");\n}\n\ncontext.set(\"data\", data, \"memoryOnly\");\nreturn; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "708242a7c469610c"
            ]
        ]
    },
    {
        "id": "708242a7c469610c",
        "type": "switch",
        "z": "9e055a34fe489dca",
        "g": "33daade83f7dfc86",
        "name": "",
        "property": "target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2s",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "15s",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1min",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 290,
        "y": 300,
        "wires": [
            [
                "cb56707051a9cf85"
            ],
            [
                "b40471e7163d4186"
            ],
            [
                "dd8b3b996b62d762"
            ]
        ]
    },
    {
        "id": "529cfce6d53a2c46",
        "type": "ui_text",
        "z": "9e055a34fe489dca",
        "g": "70f3387673fc2fec",
        "group": "76f0c0df11c2ed51",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "Max",
        "label": "Max:",
        "format": "{{msg.payload.max | number:0}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 570,
        "y": 480,
        "wires": []
    },
    {
        "id": "7cf511fd541361e3",
        "type": "ui_text",
        "z": "9e055a34fe489dca",
        "g": "70f3387673fc2fec",
        "group": "76f0c0df11c2ed51",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "Min",
        "label": "Min:",
        "format": "{{msg.payload.min | number:0}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 570,
        "y": 440,
        "wires": []
    },
    {
        "id": "6769e3c36a0bb664",
        "type": "ui_text",
        "z": "9e055a34fe489dca",
        "g": "70f3387673fc2fec",
        "group": "76f0c0df11c2ed51",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "Avg",
        "label": "5m Avg:  ",
        "format": "{{msg.payload.avg | number:1}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "fc43ffab96b31188",
        "type": "link in",
        "z": "9e055a34fe489dca",
        "g": "70f3387673fc2fec",
        "name": "Total Calls",
        "links": [
            "9a74e64faff3ba70"
        ],
        "x": 120,
        "y": 400,
        "wires": [
            [
                "2df186c56c12735c",
                "021e07256c5f844b"
            ]
        ],
        "l": true
    },
    {
        "id": "2df186c56c12735c",
        "type": "ui_gauge",
        "z": "9e055a34fe489dca",
        "g": "70f3387673fc2fec",
        "name": "",
        "group": "76f0c0df11c2ed51",
        "order": 1,
        "width": 9,
        "height": 6,
        "gtype": "gage",
        "title": "Current Call Rate",
        "label": "Calls/Min",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 330,
        "y": 400,
        "wires": []
    },
    {
        "id": "021e07256c5f844b",
        "type": "function",
        "z": "9e055a34fe489dca",
        "g": "70f3387673fc2fec",
        "name": "Avg/Min/Max",
        "func": "function roundToTwo(num) {\n    return +(Math.round(num + \"e+2\") + \"e-2\");\n}\n\nvar callData = context.get(\"callData\", \"memoryOnly\");\nif (callData === undefined) {\n    callData = {};\n    context.set(\"callData\", callData, \"memoryOnly\");\n}\n\nvar dots = context.get(\"dots\", \"memoryOnly\");\ndots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\ncontext.set(\"dots\", dots, \"memoryOnly\")\n\nvar next5mAvg = context.get(\"next5mAvg\", \"memoryOnly\");\nif (next5mAvg === undefined) {\n    next5mAvg = Number(msg.timestamp) + 300\n    context.set(\"next5mAvg\", next5mAvg, \"memoryOnly\");\n}\n\nvar number = roundToTwo(msg.payload);\n\nif (callData[msg.topic] === undefined) {\n    callData[msg.topic] = {\n        \"count\": 0,\n        \"total\": 0,\n        \"avg\": 0,\n        \"min\": number,\n        \"max\": number,\n    };\n}\n\ncallData[msg.topic].total = roundToTwo(callData[msg.topic].total + number);\ncallData[msg.topic].count += 1;\n\ncallData[msg.topic].avg = roundToTwo(callData[msg.topic].total / callData[msg.topic].count);\nif (number > callData[msg.topic].max) { callData[msg.topic].max = number; }\nif (number < callData[msg.topic].min) { callData[msg.topic].min = number; }\n\nvar nodeStatus = callData[msg.topic].count + \" - calls: \" + number;\nnode.status({ fill: \"green\", shape: dots, text: nodeStatus });\n\nif (Number(msg.timestamp) >= Number(next5mAvg)) {\n\n    var msg_out = {}\n    msg_out.payload = {}\n\n    var outputs = [\"avg\", \"min\", \"max\"];\n\n    for (let system in callData) {\n        for (var key in outputs) {\n            msg_out.payload[outputs[key]] = callData[system][outputs[key]];\n        }\n    }\n\n    node.send(msg_out);\n\n    next5mAvg = Number(msg.timestamp) + 300\n    context.set(\"next5mAvg\", next5mAvg, \"memoryOnly\");\n\n    callData = {}\n    node.status({ fill: \"yellow\", shape: dots, text: \"sent \" + nodeStatus });\n}\n\ncontext.set(\"callData\", callData, \"memoryOnly\");\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"yellow\", shape: \"dot\", text: \"waiting\" });",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "6769e3c36a0bb664",
                "7cf511fd541361e3",
                "529cfce6d53a2c46"
            ]
        ]
    },
    {
        "id": "0d7997594d8439a3",
        "type": "function",
        "z": "9e055a34fe489dca",
        "g": "473a871ba87fbdfb",
        "name": "Count Calls",
        "func": "// Record system number/shortname mapping\nvar systems = global.get(\"systems\");\nif (systems === undefined) {\n    systems = {};\n    global.set(\"systems\", systems);\n}\n\nif (msg.payload.type == \"systems\") {\n    for (var i = 0; i < msg.payload.systems.length; i++) {\n        var sys_name = msg.payload.systems[i].sys_name\n        var sys_num = msg.payload.systems[i].sys_num\n\n        systems[sys_num] = sys_name;\n        global.set(\"systems\", systems);\n    }\n    return;\n\n} else {\n    // Initialize count with known shortnames\n    var activeCalls = {};\n    var knownSystems = Object.values(systems);\n\n    for (let k in knownSystems) {\n        activeCalls[knownSystems[k]] = 0;\n    }\n\n    // Count calls by shortname\n    var sys_name;\n    var sys_num;\n    var callTotal = 0;\n\n    for (var i = 0; i < msg.payload.calls.length; i++) {\n        sys_name = msg.payload.calls[i].sys_name\n        sys_num = msg.payload.calls[i].sys_num\n\n        if (!activeCalls[sys_name]) {\n            activeCalls[sys_name] = 0;\n        }\n\n        // Ignore unstarted calls\n        // if (call_length > 0) {\n        activeCalls[sys_name] = activeCalls[sys_name] + 1;\n        callTotal = callTotal + 1;\n        // }\n\n        systems[sys_num] = sys_name;\n        global.set(\"systems\", systems);\n    }\n\n    // Generate payload by shortname\n    var msgBySys = []\n    var nodeStatus = \"\"\n\n    for (let sysName in activeCalls) {\n        var sysCalls = Number(activeCalls[sysName])\n        var sysStatus = sysName + \":\" + sysCalls\n        nodeStatus = (nodeStatus == \"\") ? sysStatus : nodeStatus + \", \" + sysStatus;\n        msgBySys.push({\n            payload: sysCalls,\n            topic: sysName,\n            timestamp: msg.payload.timestamp\n        });\n    }\n\n    // Generate payload for total calls\n    var msgAll = {\n        payload: callTotal,\n        topic: \"all\",\n        timestamp: msg.payload.timestamp\n    };\n    msgBySys.push(msgAll);\n\n    var dots = context.get(\"dots\");\n    dots = (dots == undefined) || (dots == \"ring\") ? \"dot\" : \"ring\"\n    context.set(\"dots\", dots)\n\n    node.status({ fill: \"green\", shape: dots, text: nodeStatus });\n    return [msgAll, msgBySys];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({fill:\"yellow\",shape:\"dot\",text:\"waiting\"});",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 120,
        "wires": [
            [
                "9a74e64faff3ba70"
            ],
            [
                "dc9fd2e4ff7ff2d7"
            ]
        ]
    },
    {
        "id": "85e06cd04d95e77b",
        "type": "mqtt in",
        "z": "9e055a34fe489dca",
        "g": "473a871ba87fbdfb",
        "name": "Systems In",
        "topic": "server/status/systems",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "61de5090.0f5d9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "0d7997594d8439a3"
            ]
        ]
    },
    {
        "id": "8243e4d81a8120e2",
        "type": "ui_spacer",
        "z": "9e055a34fe489dca",
        "name": "spacer",
        "group": "76f0c0df11c2ed51",
        "order": 6,
        "width": 9,
        "height": 1
    },
    {
        "id": "61de5090.0f5d9",
        "type": "mqtt-broker",
        "name": "Local MQTT Server",
        "broker": "192.168.1.20",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "76f0c0df11c2ed51",
        "type": "ui_group",
        "name": "Trunk-Recorder Call Rate",
        "tab": "605bb00421eed7da",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "605bb00421eed7da",
        "type": "ui_tab",
        "name": "Call Rate",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]